<project name="Automated Minglyn Testing" default="all" basedir=".">

	<!--properties file containing the plugin directory name including version number,
                 and list of required test plug-ins expressed as command-line argument to unzip executable.
                 Generated and packaged at build time.-->
	<property file="test.properties" />

	<!--properties file containing the build information-->
	<property file="label.properties" />

	<!--default directory where test-eclipse will be installed-->
	<property name="install" value="${basedir}/test-eclipse" />

	<!--suffix added to test output files to identify platform on which tests ran.-->
	<property name="platform" value="${os}.${ws}.${arch}" />

	<!-- The root of the eclipse installation -->
	<property name="eclipse-home" value="${install}/eclipse" />

	<!-- The directory that will contain all files containing information on the tests that ran.-->
	<property name="results" value="${basedir}/results" />

	<!--Directory for JUnit report output, console log output and .log content for each test suite.
                        Overrides default in org.eclipse.test/library.xml-->
	<property name="junit-report-output" value="${results}/${platform}" />

	<!--Directory name of org.eclipse.test plug-in installed in ${eclipse-home}-->
	<property name="org.eclipse.test" value="org.eclipse.test_3.2.0" />

	<target name="setup" unless="noclean" depends="init">
		<condition property="setupTarget" value="setup-zip">
			<contains string="${runtimeArchive}" substring=".zip" />
		</condition>
		<condition property="setupTarget" value="setup-tar.gz">
			<contains string="${runtimeArchive}" substring=".tar.gz" />
		</condition>
		<antcall target="${setupTarget}" />
		<antcall target="configureTeamTest" />
		<antcall target="configureDeltaPack" />
	</target>

	<!--setup for zip archives-->
	<target name="setup-zip" description="Reinstall the test Eclipse installation if specified by user">
		<delete dir="${install}" />
		<mkdir dir="${install}" />
		<exec dir="." executable="unzip">
			<arg line="-o -qq ${runtimeArchive} -d ${install}" />
		</exec>
		<antcall target="installTestPlugins" />
	</target>

	<!--setup for tar.gz archives-->
	<target name="setup-tar.gz" description="Reinstall the test Eclipse installation if specified by user">
		<property name="currentDir" value="${basedir}" />
		<delete dir="${install}" />
		<mkdir dir="${install}" />
		<exec dir="${install}" executable="tar">
			<arg line="-xzf ${currentDir}/${runtimeArchive}" />
		</exec>
		<antcall target="installTestPlugins" />
	</target>

	<target name="installTestPlugins">
		<exec dir="." executable="unzip">
			<arg line="-o -qq com.thoughtworks.mingle.mylyn-*.zip
								${derby}
								eclipse/plugins/com.thoughtworks.mingle.**
								${testPluginsRequired}
								-d ${install}" />
		</exec>

		<exec dir="." executable="unzip">
			<arg line="-o -qq eclipse-test-framework-${buildId}.zip 
								-d ${install}" />
		</exec>

		<copy todir="${eclipse-home}" includeemptydirs="true">
			<fileset dir="${mylyn.base}" />
		</copy>
		
	</target>

	<target name="init" depends="setRuntimeArchive">

		<mkdir dir="${results}/xml" />
		<mkdir dir="${results}/html" />
		<mkdir dir="${junit-report-output}" />

		<!--Unlock files on the Mac before starting tests.
                  Required to delete some workspace directories (org.eclipse.core.filebuffers.tests and Team CVS tests).-->
		<exec dir="${basedir}" executable="chflags" os="Mac OS X">
			<arg line="-R nouchg ${install}" />
		</exec>
	</target>

	<target name="setRuntimeArchive">
		<condition property="runtimeArchive" value="eclipse-SDK-${buildId}-win32.zip">
			<and>
				<equals arg1="${os}" arg2="win32" />
				<equals arg1="${ws}" arg2="win32" />
				<equals arg1="${arch}" arg2="x86" />
			</and>
		</condition>
		<condition property="runtimeArchive" value="eclipse-SDK-${buildId}-win32-wpf.zip">
			<and>
				<equals arg1="${os}" arg2="win32" />
				<equals arg1="${ws}" arg2="wpf" />
				<equals arg1="${arch}" arg2="x86" />
			</and>
		</condition>
		<condition property="runtimeArchive" value="eclipse-SDK-${buildId}-win32-win32-x86_64.zip">
			<and>
				<equals arg1="${os}" arg2="win32" />
				<equals arg1="${ws}" arg2="win32" />
				<equals arg1="${arch}" arg2="x86_64" />
			</and>
		</condition>
		<condition property="runtimeArchive" value="eclipse-SDK-${buildId}-linux-gtk.tar.gz">
			<and>
				<equals arg1="${os}" arg2="linux" />
				<equals arg1="${ws}" arg2="gtk" />
				<equals arg1="${arch}" arg2="x86" />
			</and>
		</condition>
		<condition property="runtimeArchive" value="eclipse-SDK-${buildId}-linux-gtk-x86_64.tar.gz">
			<and>
				<equals arg1="${os}" arg2="linux" />
				<equals arg1="${ws}" arg2="gtk" />
				<equals arg1="${arch}" arg2="x86_64" />
			</and>
		</condition>
		<condition property="runtimeArchive" value="eclipse-SDK-${buildId}-linux-motif.tar.gz">
			<and>
				<equals arg1="${os}" arg2="linux" />
				<equals arg1="${ws}" arg2="motif" />
				<equals arg1="${arch}" arg2="x86" />
			</and>
		</condition>
		<condition property="runtimeArchive" value="eclipse-SDK-${buildId}-linux-gtk-ppc.tar.gz">
			<and>
				<equals arg1="${os}" arg2="linux" />
				<equals arg1="${ws}" arg2="gtk" />
				<equals arg1="${arch}" arg2="ppc" />
			</and>
		</condition>
		<condition property="runtimeArchive" value="eclipse-SDK-${buildId}-linux-gtk-x86_64.tar.gz">
			<and>
				<equals arg1="${os}" arg2="linux" />
				<equals arg1="${ws}" arg2="gtk" />
				<equals arg1="${arch}" arg2="ppc" />
			</and>
		</condition>
		<condition property="runtimeArchive" value="eclipse-SDK-${buildId}-macosx-carbon.tar.gz">
			<and>
				<equals arg1="${os}" arg2="macosx" />
				<equals arg1="${ws}" arg2="carbon" />
				<equals arg1="${arch}" arg2="ppc" />
			</and>
		</condition>
		<condition property="runtimeArchive" value="eclipse-SDK-${buildId}-macosx-carbon.tar.gz">
			<and>
				<equals arg1="${os}" arg2="macosx" />
				<equals arg1="${ws}" arg2="carbon" />
				<equals arg1="${arch}" arg2="x86" />
			</and>
		</condition>
		<condition property="runtimeArchive" value="eclipse-SDK-${buildId}-hpux-motif.zip">
			<and>
				<equals arg1="${os}" arg2="hpux" />
				<equals arg1="${ws}" arg2="motif" />
				<equals arg1="${arch}" arg2="PA_RISC" />
			</and>
		</condition>
		<condition property="runtimeArchive" value="eclipse-SDK-${buildId}-solaris-motif.zip">
			<and>
				<equals arg1="${os}" arg2="solaris" />
				<equals arg1="${ws}" arg2="motif" />
				<equals arg1="${arch}" arg2="sparc" />
			</and>
		</condition>
		<condition property="runtimeArchive" value="eclipse-SDK-${buildId}-solaris-gtk.zip">
			<and>
				<equals arg1="${os}" arg2="solaris" />
				<equals arg1="${ws}" arg2="gtk" />
				<equals arg1="${arch}" arg2="sparc" />
			</and>
		</condition>
		<condition property="runtimeArchive" value="eclipse-SDK-${buildId}-aix-motif.zip">
			<and>
				<equals arg1="${os}" arg2="aix" />
				<equals arg1="${ws}" arg2="motif" />
				<equals arg1="${arch}" arg2="ppc" />
			</and>
		</condition>
	</target>

	<target name="setJVMProperties" depends="setJVMfromUserSpecified">
		<!--enable tests requiring 1.5 or 1.6 vms to run if running vm level detected matches required execution environment-->
		<condition property="J2SE-5.0" value="${java.home}/bin/java">
			<or>
				<equals arg1="${ant.java.version}" arg2="1.5" />
				<equals arg1="${ant.java.version}" arg2="1.6" />
			</or>
		</condition>
		<condition property="J2SE-6.0" value="${java.home}/bin/java">
			<equals arg1="${ant.java.version}" arg2="1.6" />
		</condition>

	</target>
	<target name="setJVMfromUserSpecified" if="jvm">
		<exec executable="${jvm}" outputproperty="javaversion">
			<arg line="-version" />
		</exec>
		<echo message="java version of ${jvm} is ${javaversion}" />
		<condition property="J2SE-6.0" value="${jvm}">
			<contains string="${javaversion}" substring="java version &quot;1.6" />
		</condition>
		<condition property="J2SE-5.0" value="${jvm}">
			<or>
				<contains string="${javaversion}" substring="java version &quot;1.6" />
				<contains string="${javaversion}" substring="java version &quot;1.5" />
			</or>
		</condition>
		<echo message="J2SE-6.0:  ${J2SE-6.0}" />
		<echo message="J2SE-5.0:  ${J2SE-5.0}" />
	</target>
	<target name="configureTeamTest" if="teamcvs">
		<!-- Fill in cvs repository information -->
		<replace file="${eclipse-home}/plugins/${org.eclipse.team.tests.cvs.core}/repository.properties" token="@user@" value="${cvs_user}" />
		<replace file="${eclipse-home}/plugins/${org.eclipse.team.tests.cvs.core}/repository.properties" token="@password@" value="${cvs_password}" />
		<replace file="${eclipse-home}/plugins/${org.eclipse.team.tests.cvs.core}/repository.properties" token="@host@" value="${cvs_host}" />
		<replace file="${eclipse-home}/plugins/${org.eclipse.team.tests.cvs.core}/repository.properties" token="@root@" value="${cvs_root}" />
	</target>

	<target name="configureDeltaPack" if="pdebuild">
		<property name="deltapackArchive" value="eclipse-RCP-${buildId}-delta-pack.zip" />
		<property name="installDeltapack" value="${install}/deltapack" />
		<mkdir dir="${installDeltapack}" />
		<exec dir="." executable="unzip">
			<arg line="-o -qq ${deltapackArchive} -d ${installDeltapack}" />
		</exec>
	</target>


	<macrodef name="runTests">
		<attribute name="testPlugin" />
		<attribute name="testPluginsRequired" default="" />
		<sequential>
			<!--alwasy use eclipse executable to launch tests with the exception of performance tests-->
			<!--condition property="useEclipseExe" value="true">
                                <not>
                                        <equals arg1="${test.target}" arg2="performance"/>
                                </not>
                        </condition-->

			<condition property="performance.target.present" value="true">
				<isset property="@{testPlugin}.has.performance.target" />
			</condition>

			<!--override the value of this property with performance if the tests run on performance machine-->
			<property name="test.target" value="junit" />
			<property name="report" value="@{testPlugin}" />

			<!--install Cloudscape plug-ins if running performance tests-->
			<condition property="derby" value="eclipse/plugins/Cloudscape*/* ">
				<equals arg1="${test.target}" arg2="performance" />
			</condition>
			<property name="derby" value="" />
			<antcall target="${test.target}">
				<param name="testPlugin" value="${@{testPlugin}}" />
				<param name="testPluginsRequired" value="@{testPluginsRequired}" />
				<param name="output-file" value="@{testPlugin}.xml" />
			</antcall>
		</sequential>
	</macrodef>

	<target name="junit" unless="skip.test">
		<antcall target="setup" />
		<ant antfile="${eclipse-home}/plugins/${testPlugin}/test.xml" dir="${eclipse-home}" />
		<antcall target="genResults" />
	</target>

	<target name="performance" if="performance.target.present" unless="skip.test">
		<antcall target="setup" />
		<ant antfile="${eclipse-home}/plugins/${testPlugin}/test.xml" dir="${eclipse-home}" target="performance" />
		<antcall target="genResults" />
	</target>

	<target name="genResults">
		<copy file="${eclipse-home}/${report}.xml" tofile="${results}/xml/${report}_${platform}.xml" failonerror="false" />
		<style style="${eclipse-home}/plugins/${org.eclipse.test}/JUNIT.XSL" basedir="${results}/xml" destdir="${results}/html" />
	</target>

	<target name="minglyn-core">
		<runTests testPlugin="com.thoughtworks.mingle.mylyn.core.tests" />
	</target>

	<target name="clean">
		<delete dir="${install}"/>
		<delete dir="${results}"/>
	</target>
	
	<target name="all" depends="clean">
		<antcall target="minglyn-core" />
	</target>
</project>

